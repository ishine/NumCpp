<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classnc_1_1polynomial_1_1_poly1d" kind="class" language="C++" prot="public">
    <compoundname>nc::polynomial::Poly1d</compoundname>
    <includes refid="_poly1d_8hpp" local="no">Poly1d.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>dtype</declname>
        <defname>dtype</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnc_1_1polynomial_1_1_poly1d_1a365cd5e23d46644381e3c884337ef2a1" prot="private" static="no" mutable="no">
        <type>std::vector&lt; dtype &gt;</type>
        <definition>std::vector&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::coefficients_</definition>
        <argsstring></argsstring>
        <name>coefficients_</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="55" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a26a871724b90be8b662b5df41178b711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nc::polynomial::Poly1d&lt; dtype &gt;::Poly1d</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>Poly1d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default Constructor (not very usefull, but needed for other containers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a33c01905d846d32e7d49dc4e7e884551" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::polynomial::Poly1d&lt; dtype &gt;::Poly1d</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inValues, bool isRoots=false)</argsstring>
        <name>Poly1d</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isRoots</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para>(polynomial coefficients in ascending order of power if second input is false, polynomial roots if second input is true) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isRoots</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="73" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="73" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a58a632fa53f4ad61f9d692eadba8552b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::coefficients</definition>
        <argsstring>() const noexcept</argsstring>
        <name>coefficients</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> coefficients</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="105" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a51d81c77d81aa59c5be6e89a0c8ae33e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt;</type>
        <definition>Poly1d&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::operator *</definition>
        <argsstring>(const Poly1d&lt; dtype &gt; &amp;inOtherPoly) const noexcept</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies the two <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> objects</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="275" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1abdd077db9b18c978f79be025af31a8c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
        <definition>Poly1d&lt;dtype&gt;&amp; nc::polynomial::Poly1d&lt; dtype &gt;::operator *=</definition>
        <argsstring>(const Poly1d&lt; dtype &gt; &amp;inOtherPoly) noexcept</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies the two <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> objects</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="289" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="289" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1ac82910d648a2a3cfd2301e12907414dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>dtype</type>
        <definition>dtype nc::polynomial::Poly1d&lt; dtype &gt;::operator()</definition>
        <argsstring>(dtype inValue) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evaluates the Poly1D object for the input value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="160" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="160" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a2187ce69997f60f4a73eb9e66a4d6199" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt;</type>
        <definition>Poly1d&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::operator+</definition>
        <argsstring>(const Poly1d&lt; dtype &gt; &amp;inOtherPoly) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the two <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> objects</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="181" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a13372c13e633ffc87418d9369adcfea0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
        <definition>Poly1d&lt;dtype&gt;&amp; nc::polynomial::Poly1d&lt; dtype &gt;::operator+=</definition>
        <argsstring>(const Poly1d&lt; dtype &gt; &amp;inOtherPoly) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the two <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> objects</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="195" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="195" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a3dedbdd1923bc2f2b41c585d50ef4f4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt;</type>
        <definition>Poly1d&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::operator-</definition>
        <argsstring>(const Poly1d&lt; dtype &gt; &amp;inOtherPoly) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts the two <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> objects</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="228" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a512b5c5d835b40688f6c19c2b337ec1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
        <definition>Poly1d&lt;dtype&gt;&amp; nc::polynomial::Poly1d&lt; dtype &gt;::operator-=</definition>
        <argsstring>(const Poly1d&lt; dtype &gt; &amp;inOtherPoly) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts the two <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> objects</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="242" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="242" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1acfcba8169d451d503a336fa01a8af5ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt;</type>
        <definition>Poly1d&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::operator^</definition>
        <argsstring>(uint32 inPower) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inPower</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raise the <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> to an integer power</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inPower</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="320" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a74f2aca0939b51e2c4048abc792ee0b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
        <definition>Poly1d&lt;dtype&gt;&amp; nc::polynomial::Poly1d&lt; dtype &gt;::operator^=</definition>
        <argsstring>(uint32 inPower) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inPower</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raise the <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> to an integer power</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inPower</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="334" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="334" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1ab978ca2f65c7cd640309c1be86aa9141" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
        <definition>uint32 nc::polynomial::Poly1d&lt; dtype &gt;::order</definition>
        <argsstring>() const noexcept</argsstring>
        <name>order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the order of the <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="117" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1abd3335aec42b7856a0d83a96f7e72e89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::polynomial::Poly1d&lt; dtype &gt;::print</definition>
        <argsstring>() const noexcept</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the string representation of the <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> object to the console </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="146" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a5e943edcdfbacb4d7a94a11f55532efe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nc::polynomial::Poly1d&lt; dtype &gt;::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts the polynomial to a string representation</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="129" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="129" bodyend="139"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnc_1_1polynomial_1_1_poly1d_1a80f939448c8b58ab286c57ab0212b785" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;inOStream, const Poly1d&lt; dtype &gt; &amp;inPoly) noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>inOStream</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>io operator for the <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> class</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOStream</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::ostream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="365" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="365" bodyend="369"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A one-dimensional polynomial class. A convenience class, used to encapsulate &quot;natural&quot; operations on polynomials </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="28">
        <label>nc::polynomial::Poly1d&lt; dtype &gt;</label>
        <link refid="classnc_1_1polynomial_1_1_poly1d"/>
      </node>
    </collaborationgraph>
    <location file="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="53" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="52" bodyend="370"/>
    <listofallmembers>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a58a632fa53f4ad61f9d692eadba8552b" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>coefficients</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a365cd5e23d46644381e3c884337ef2a1" prot="private" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>coefficients_</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a51d81c77d81aa59c5be6e89a0c8ae33e" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator *</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1abdd077db9b18c978f79be025af31a8c2" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator *=</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1ac82910d648a2a3cfd2301e12907414dd" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator()</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a2187ce69997f60f4a73eb9e66a4d6199" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator+</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a13372c13e633ffc87418d9369adcfea0" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator+=</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a3dedbdd1923bc2f2b41c585d50ef4f4f" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator-</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a512b5c5d835b40688f6c19c2b337ec1e" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator-=</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a80f939448c8b58ab286c57ab0212b785" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator&lt;&lt;</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1acfcba8169d451d503a336fa01a8af5ec" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator^</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a74f2aca0939b51e2c4048abc792ee0b5" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator^=</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1ab978ca2f65c7cd640309c1be86aa9141" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>order</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a26a871724b90be8b662b5df41178b711" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>Poly1d</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a33c01905d846d32e7d49dc4e7e884551" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>Poly1d</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1abd3335aec42b7856a0d83a96f7e72e89" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>print</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a5e943edcdfbacb4d7a94a11f55532efe" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>str</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
