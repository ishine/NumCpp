<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespacenc_1_1special" kind="namespace" language="C++">
    <compoundname>nc::special</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacenc_1_1special_1a386627cce2e27a8297dfe0b7a0adc2ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::airy_ai</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>airy_ai</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The first linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_ai.hpp" line="51" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_ai.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a0d31b7555e0dbab1059929562a6fd1bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::airy_ai</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>airy_ai</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The first linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_ai.hpp" line="67" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_ai.hpp" bodystart="67" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a8def29528763b2e5f7488cd74548c7ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::airy_ai_prime</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>airy_ai_prime</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The derivative of the first linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_ai_prime.hpp" line="51" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_ai_prime.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ac1b8e09c59acbf7a4f4eba2275c5491b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::airy_ai_prime</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>airy_ai_prime</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The derivative of the first linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_ai_prime.hpp" line="67" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_ai_prime.hpp" bodystart="67" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a9908d86e7b2e937066350cf17b25fcf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::airy_bi</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>airy_bi</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The second linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_bi.hpp" line="51" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_bi.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a18a6a97e4088fa8d2df33090d0db630f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::airy_bi</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>airy_bi</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The second linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_bi.hpp" line="67" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_bi.hpp" bodystart="67" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a8815f90fe82d47839a008ab7dc3331ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::airy_bi_prime</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>airy_bi_prime</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The derivative of the second linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_bi_prime.hpp" line="51" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_bi_prime.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1abd1f29ffc5f536b3906983ced236e7cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::airy_bi_prime</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>airy_bi_prime</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The derivative of the second linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_bi_prime.hpp" line="67" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_bi_prime.hpp" bodystart="67" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a05b0668c9a1114cef9b626ad9f220438" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::special::bernoilli</definition>
        <argsstring>(uint32 n) noexcept</argsstring>
        <name>bernoilli</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Both return the nth Bernoulli number B2n.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bernoulli.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bernoulli.hpp" bodystart="50" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1aa82360ea97c720647249d315bf7a51b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::bernoilli</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inArray) noexcept</argsstring>
        <name>bernoilli</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Both return the nth Bernoulli number B2n.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bernoulli.hpp" line="73" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bernoulli.hpp" bodystart="73" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a038f2d43115705053a4ee13f434ef5fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::bessel_in</definition>
        <argsstring>(dtype1 inV, dtype2 inX) noexcept</argsstring>
        <name>bessel_in</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modified Cylindrical Bessel function of the first kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_in.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_in.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a472da67e2c68a157863327c66194d0da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::bessel_in</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX) noexcept</argsstring>
        <name>bessel_in</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modified Cylindrical Bessel function of the first kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_in.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_in.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a6b98b3a2b74ce56c0fd7cbace101cf1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::bessel_in_prime</definition>
        <argsstring>(dtype1 inV, dtype2 inX) noexcept</argsstring>
        <name>bessel_in_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Modified Cylindrical Bessel function of the first kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_in_prime.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_in_prime.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a9e412451c0696998d3b7fcb0fbf2e654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::bessel_in_prime</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX) noexcept</argsstring>
        <name>bessel_in_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Modified Cylindrical Bessel function of the first kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_in_prime.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_in_prime.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a74e43c6100065c59ed2e9ba848c43a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::bessel_jn</definition>
        <argsstring>(dtype1 inV, dtype2 inX) noexcept</argsstring>
        <name>bessel_jn</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cylindrical Bessel function of the first kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_jn.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_jn.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a1e3b088bf26f1fbd1a8546c09d77d113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::bessel_jn</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX) noexcept</argsstring>
        <name>bessel_jn</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cylindrical Bessel function of the first kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_jn.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_jn.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1af34db22a9b5c902115c5e0c1fd71cd79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::bessel_jn_prime</definition>
        <argsstring>(dtype1 inV, dtype2 inX) noexcept</argsstring>
        <name>bessel_jn_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Cylindrical Bessel function of the first kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_jn_prime.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_jn_prime.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1aa81356f8c6e0a83e43b29214dc93a136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::bessel_jn_prime</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX) noexcept</argsstring>
        <name>bessel_jn_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Cylindrical Bessel function of the first kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_jn_prime.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_jn_prime.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a0c37ad66b8671d06518d9efe1a934bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::bessel_kn</definition>
        <argsstring>(dtype1 inV, dtype2 inX) noexcept</argsstring>
        <name>bessel_kn</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modified Cylindrical Bessel function of the second kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_kn.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_kn.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a941f011614a3d449c2d00413309a14ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::bessel_kn</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX) noexcept</argsstring>
        <name>bessel_kn</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modified Cylindrical Bessel function of the second kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_kn.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_kn.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a3d84ccebf5e492f4d7ee896891138401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::bessel_kn_prime</definition>
        <argsstring>(dtype1 inV, dtype2 inX) noexcept</argsstring>
        <name>bessel_kn_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Modified Cylindrical Bessel function of the second kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_kn_prime.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_kn_prime.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ae51ef19ded851f5be7173d84c5867246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::bessel_kn_prime</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX) noexcept</argsstring>
        <name>bessel_kn_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Modified Cylindrical Bessel function of the second kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_kn_prime.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_kn_prime.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1acb3c8830843c0a13f44c3cbf80e8e06f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::bessel_yn</definition>
        <argsstring>(dtype1 inV, dtype2 inX) noexcept</argsstring>
        <name>bessel_yn</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cylindrical Bessel function of the second kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_yn.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_yn.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1abc3786b5a4857ad55d7d696099d35224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::bessel_yn</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX) noexcept</argsstring>
        <name>bessel_yn</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cylindrical Bessel function of the second kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_yn.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_yn.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1afb461ee80c8847edf730fd18203e13cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::bessel_yn_prime</definition>
        <argsstring>(dtype1 inV, dtype2 inX) noexcept</argsstring>
        <name>bessel_yn_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Cylindrical Bessel function of the second kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_yn_prime.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_yn_prime.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ab3a726aa41f2aeb789ab87269d8ad900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::bessel_yn_prime</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX) noexcept</argsstring>
        <name>bessel_yn_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Cylindrical Bessel function of the second kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_yn_prime.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/bessel_yn_prime.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1aa2996162bcbabf343a3fa81617fd9b14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::beta</definition>
        <argsstring>(dtype1 a, dtype2 b) noexcept</argsstring>
        <name>beta</name>
        <param>
          <type>dtype1</type>
          <declname>a</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The beta function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/beta.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/beta.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a46747e640813870da56bb581ea2917b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::beta</definition>
        <argsstring>(const NdArray&lt; dtype1 &gt; &amp;inArrayA, const NdArray&lt; dtype2 &gt; &amp;inArrayB) noexcept</argsstring>
        <name>beta</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype1 &gt; &amp;</type>
          <declname>inArrayA</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The beta function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArrayA</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayB</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/beta.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/beta.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a08395cbdd1ee39fd14c5f9d9edb8b486" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::special::cnr</definition>
        <argsstring>(uint32 n, uint32 r) noexcept</argsstring>
        <name>cnr</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of combinations of n choose r. C(n, r)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the total number of items </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items taken </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/cnr.hpp" line="52" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/cnr.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ad17c28693eed370fda9f7eff67df23a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; nc::special::cyclic_hankel_1</definition>
        <argsstring>(dtype1 inV, dtype2 inX) noexcept</argsstring>
        <name>cyclic_hankel_1</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hankel funcion of the first kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/cyclic_hankel_1.hpp" line="49" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/cyclic_hankel_1.hpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a3935261506b6ec4528feea0bd296aaa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; nc::special::cyclic_hankel_2</definition>
        <argsstring>(dtype1 inV, dtype2 inX) noexcept</argsstring>
        <name>cyclic_hankel_2</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hankel funcion of the second kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/cyclic_hankel_2.hpp" line="49" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/cyclic_hankel_2.hpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a0f8c75b138e38af1e3b2408050a17467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::digamma</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>digamma</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the digamma or psi function of inValue. Digamma is defined as the logarithmic derivative of the gamma function:</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/digamma.hpp" line="51" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/digamma.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a2ec7a990addc1d7ff888bcf7a272edcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::digamma</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>digamma</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the digamma or psi function of values in inArray. Digamma is defined as the logarithmic derivative of the gamma function:</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/digamma.hpp" line="67" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/digamma.hpp" bodystart="67" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a0e700f032bbd8f0dc233f1bd0599a693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::erf</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>erf</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the error function of all elements in the input array. Integral (from [-x, x]) of np.exp(np.power(-t, 2)) dt, multiplied by 1/np.pi.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erf.hpp" line="51" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erf.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a3e7e24a6a8f6c8a7b4767c01ecd086ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::erf</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>erf</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the error function of all elements in the input array. Integral (from [-x, x]) of np.exp(np.power(-t, 2)) dt, multiplied by 1/np.pi.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erf.hpp" line="67" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erf.hpp" bodystart="67" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a76b1e372bb5b035e705f52ba4afd279f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::erf_inv</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>erf_inv</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse error function of z, that is a value x such that: z = erf(x)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erf_inv.hpp" line="51" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erf_inv.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a9031ce5ffebbb7972eb7cdafd44ca851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::erf_inv</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>erf_inv</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse error function of z, that is a value x such that: z = erf(x)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erf_inv.hpp" line="67" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erf_inv.hpp" bodystart="67" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a7dc8f8671decfd25da323a7cf33cd82f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::erfc</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>erfc</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the complement of the error function of inValue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erfc.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erfc.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a6b496476334197db947833170786a78e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::erfc</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>erfc</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the element-wise complement of the error function of inValue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erfc.hpp" line="66" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erfc.hpp" bodystart="66" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1af44c88391a82e2bf739f86e8bf3284be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::erfc_inv</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>erfc_inv</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse complentary error function of z, that is a value x such that: z = erfc(x)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erfc_inv.hpp" line="51" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erfc_inv.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ab9398d528b93a4e029729637fa90c68b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::erfc_inv</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>erfc_inv</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse complementary error function of z, that is a value x such that: z = erfc(x)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erfc_inv.hpp" line="67" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/erfc_inv.hpp" bodystart="67" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a429b2caa6cf7fcbdba8ce3184c0367e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::special::factorial</definition>
        <argsstring>(uint32 inValue)</argsstring>
        <name>factorial</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the factorial of the input value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/factorial.hpp" line="52" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/factorial.hpp" bodystart="52" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1af28b6a68a7d599ad1f973082ec275dbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::factorial</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inArray) noexcept</argsstring>
        <name>factorial</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the factorial of the input value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/factorial.hpp" line="73" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/factorial.hpp" bodystart="73" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a1922de5ad7c6fba4aedbce02d08e1b78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::gamma</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>gamma</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the &quot;true gamma&quot; of value z</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/gamma.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/gamma.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ac22cc8d32cc97454c0ecfb432f2a316d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::gamma</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>gamma</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the &quot;true gamma&quot; of values in array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/gamma.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/gamma.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a41fe463c9dae1da7365d6bac75ca5e84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::gamma1pm1</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>gamma1pm1</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the true gamma(dz + 1) - 1 of value z</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/gamma1pm1.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/gamma1pm1.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a568563ea05c2e31278de66112c9429c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::gamma1pm1</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>gamma1pm1</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the true gamma(dz + 1) - 1 of values in array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/gamma1pm1.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/gamma1pm1.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a0cb1312c9f5ba140d36b2c6565556c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::log_gamma</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>log_gamma</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns natural log of the true gamma of value z</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/log_gamma.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/log_gamma.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1aada2f70d0f67c79921b1c03020f0cec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::log_gamma</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>log_gamma</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns natural log of the true gamma of values in array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/log_gamma.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/log_gamma.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ad24badd4fad228e42db56cad017747bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::special::pnr</definition>
        <argsstring>(uint32 n, uint32 r) noexcept</argsstring>
        <name>pnr</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of permutaions of n choose r. P(n, r)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the total number of items </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items taken </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/pnr.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/pnr.hpp" bodystart="50" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a6004700cebef1c51c8d4f0a0c66efe5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::polygamma</definition>
        <argsstring>(uint32 n, dtype inValue) noexcept</argsstring>
        <name>polygamma</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the polygamma function of inValue. Polygamma is defined as the n&apos;th derivative of the digamma function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the nth derivative </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/polygamma.hpp" line="51" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/polygamma.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ab404a49a8e57faef0e9aee9869df5c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::polygamma</definition>
        <argsstring>(uint32 n, const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>polygamma</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the polygamma function of the values in inArray. Polygamma is defined as the n&apos;th derivative of the digamma function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the nth derivative </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/polygamma.hpp" line="67" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/polygamma.hpp" bodystart="67" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a2e0b9f447fd033ac62a0dfe3eadb46cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
        <definition>uint32 nc::special::prime</definition>
        <argsstring>(uint32 n)</argsstring>
        <name>prime</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The function prime provides fast table lookup to the first 10000 prime numbers (starting from 2 as the zeroth prime: as 1 isn&apos;t terribly useful in practice)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the nth prime number to return </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/prime.hpp" line="54" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/prime.hpp" bodystart="54" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a21b6aff295a57c30b4f3a5e4e20e026c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt;uint32&gt; nc::special::prime</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inArray) noexcept</argsstring>
        <name>prime</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The function prime provides fast table lookup to the first 10000 prime numbers (starting from 2 as the zeroth prime: as 1 isn&apos;t terribly useful in practice)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NdArray&lt;uint32&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/prime.hpp" line="74" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/prime.hpp" bodystart="74" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ad8ce69360402aff230c2d0ca72e13042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::riemann_zeta</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>riemann_zeta</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Riemann Zeta function <ulink url="https://en.wikipedia.org/wiki/Riemann_zeta_function">https://en.wikipedia.org/wiki/Riemann_zeta_function</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/riemann_zeta.hpp" line="51" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/riemann_zeta.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a2839c02bab5022331ebecdae4bddc2a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::riemann_zeta</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>riemann_zeta</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Riemann Zeta function <ulink url="https://en.wikipedia.org/wiki/Riemann_zeta_function">https://en.wikipedia.org/wiki/Riemann_zeta_function</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/riemann_zeta.hpp" line="67" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/riemann_zeta.hpp" bodystart="67" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a9aea83127eb18d7c06d5096959c86719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::softmax</definition>
        <argsstring>(const NdArray&lt; T &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>softmax</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; T &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The softmax function transforms each element of a collection by computing the exponential of each element divided by the sum of the exponentials of all the elements. That is, if x is a one-dimensional numpy array: softmax(x) = np.exp(x)/sum(np.exp(x))</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/softmax.hpp" line="52" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/softmax.hpp" bodystart="52" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1acbfc84fedcf02e4c88a726e2c8ed549b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::spherical_bessel_jn</definition>
        <argsstring>(uint32 inV, dtype inX) noexcept</argsstring>
        <name>spherical_bessel_jn</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Bessel function of the first kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/spherical_bessel_jn.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/spherical_bessel_jn.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a80b89ecc28e6725d9ac95d9ff004b6db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::spherical_bessel_jn</definition>
        <argsstring>(uint32 inV, const NdArray&lt; dtype &gt; &amp;inArrayX) noexcept</argsstring>
        <name>spherical_bessel_jn</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Bessel function of the first kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/spherical_bessel_jn.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/spherical_bessel_jn.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ae61813078995dd0c5fa2983241c064d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::spherical_bessel_yn</definition>
        <argsstring>(uint32 inV, dtype inX) noexcept</argsstring>
        <name>spherical_bessel_yn</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Bessel function of the second kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/spherical_bessel_yn.hpp" line="50" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/spherical_bessel_yn.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ae1eff983360b960ccd25b83040ef0190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::spherical_bessel_yn</definition>
        <argsstring>(uint32 inV, const NdArray&lt; dtype &gt; &amp;inArrayX) noexcept</argsstring>
        <name>spherical_bessel_yn</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Bessel function of the second kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/spherical_bessel_yn.hpp" line="65" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/spherical_bessel_yn.hpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a944a47815c60e3ff8867d27056654c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; nc::special::spherical_hankel_1</definition>
        <argsstring>(dtype1 inV, dtype2 inX) noexcept</argsstring>
        <name>spherical_hankel_1</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Hankel funcion of the first kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/spherical_hankel_1.hpp" line="49" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/spherical_hankel_1.hpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a0aa8bb9125689a9b522ebabe98170c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; nc::special::spherical_hankel_2</definition>
        <argsstring>(dtype1 inV, dtype2 inX) noexcept</argsstring>
        <name>spherical_hankel_2</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Hankel funcion of the second kind</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/spherical_hankel_2.hpp" line="49" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/spherical_hankel_2.hpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1aab92fe0af9e9cec601ff68ebb6eeee04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::special::trigamma</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>trigamma</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the trigamma function of x. Trigamma is defined as the derivative of the digamma function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/trigamma.hpp" line="51" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/trigamma.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ac6f6ac0fade4babd204d8c39836402ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::trigamma</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>trigamma</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the trigamma function of x. Trigamma is defined as the derivative of the digamma function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/trigamma.hpp" line="67" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/trigamma.hpp" bodystart="67" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Special/airy_ai.hpp" line="39" column="1"/>
  </compounddef>
</doxygen>
