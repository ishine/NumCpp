<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classnc_1_1_random" kind="class" language="C++" prot="public">
    <compoundname>nc::Random</compoundname>
    <includes refid="_random_8hpp" local="no">Random.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>dtype</declname>
        <defname>dtype</defname>
        <defval><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnc_1_1_random_1a11b3ea85e8fb4c86365107b95b313b44" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::bernoulli</definition>
        <argsstring>(const Shape &amp;inShape, dtype inP)</argsstring>
        <name>bernoulli</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from the �bernoulli� distribution.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inP</parametername>
</parameternamelist>
<parameterdescription>
<para>(probability of success [0, 1]) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="66" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="66" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a236668f625cd32cbea5288c5eaf54f7c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::beta</definition>
        <argsstring>(const Shape &amp;inShape, dtype inAlpha, dtype inBeta)</argsstring>
        <name>beta</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inAlpha</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inBeta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from the �beta� distribution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.beta.html#numpy.random.beta">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.beta.html#numpy.random.beta</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAlpha</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inBeta</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="99" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="99" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a71c188103a657ffca2cdc774f10b0401" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::binomial</definition>
        <argsstring>(const Shape &amp;inShape, dtype inN, double inP=0.5)</argsstring>
        <name>binomial</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inN</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inP</declname>
          <defval>0.5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from the �binomial� distribution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.binomial.html#numpy.random.binomial">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.binomial.html#numpy.random.binomial</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inN</parametername>
</parameternamelist>
<parameterdescription>
<para>(number of trials) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inP</parametername>
</parameternamelist>
<parameterdescription>
<para>(probablity of success [0, 1]) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="139" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="139" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a4581af3814e86dc1747c9551be235f6f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::cauchy</definition>
        <argsstring>(const Shape &amp;inShape, dtype inMean=0, dtype inSigma=1)</argsstring>
        <name>cauchy</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inMean</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>dtype</type>
          <declname>inSigma</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a &quot;cauchy&quot; distrubution.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value of the underlying normal distribution. Default is 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inSigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation of the underlying normal distribution. Should be greater than zero. Default is 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="248" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="248" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1abb4faf51dcca8ae9759b1262d64d7963" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::chiSquare</definition>
        <argsstring>(const Shape &amp;inShape, dtype inDof)</argsstring>
        <name>chiSquare</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inDof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from the �chi square� distribution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.chisquare.html#numpy.random.chisquare">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.chisquare.html#numpy.random.chisquare</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inDof</parametername>
</parameternamelist>
<parameterdescription>
<para>(independent random variables) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="181" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="181" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a21c9eb05244f5b2699aba20c355271d2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>dtype</type>
        <definition>static dtype nc::Random&lt; dtype &gt;::choice</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>choice</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Chooses a random sample from an input array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="209" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="209" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a93cdbd1eb221effd117fa71853a4a85b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::choice</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint32 inNum)</argsstring>
        <name>choice</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Chooses inNum random samples from an input array. Samples are in no way guarunteed to be unique.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNum</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 0) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="225" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="225" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1ac012f79d1cf5bb09a8557e338c222719" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::discrete</definition>
        <argsstring>(const Shape &amp;inShape, const NdArray&lt; double &gt; &amp;inWeights)</argsstring>
        <name>discrete</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt; &amp;</type>
          <declname>inWeights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a &quot;discrete&quot; distrubution. It produces integers in the range [0, n) with the probability of producing each value is specified by the parameters of the distribution.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inWeights</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="281" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="281" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1aa035bb7e8e2987dc4a447b839ccc4cd8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::exponential</definition>
        <argsstring>(const Shape &amp;inShape, dtype inScaleValue=1) noexcept</argsstring>
        <name>exponential</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inScaleValue</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a &quot;exponential&quot; distrubution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.exponential.html#numpy.random.exponential">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.exponential.html#numpy.random.exponential</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inScaleValue</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="309" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="309" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a53a28374728aaa7087e231f0fae53b08" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::extremeValue</definition>
        <argsstring>(const Shape &amp;inShape, dtype inA=1, dtype inB=1)</argsstring>
        <name>extremeValue</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inA</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>dtype</type>
          <declname>inB</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a &quot;extreme value&quot; distrubution.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inA</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inB</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="333" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="333" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a6c5add0fbad5e12b09bcc906bc3e3042" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::f</definition>
        <argsstring>(const Shape &amp;inShape, dtype inDofN, dtype inDofD)</argsstring>
        <name>f</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inDofN</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inDofD</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a &quot;F&quot; distrubution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.f.html#numpy.random.f">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.f.html#numpy.random.f</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inDofN</parametername>
</parameternamelist>
<parameterdescription>
<para>Degrees of freedom in numerator. Should be greater than zero. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inDofD</parametername>
</parameternamelist>
<parameterdescription>
<para>Degrees of freedom in denominator. Should be greater than zero. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="373" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="373" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a93a1804dff12c99cbfea67d63b6c1705" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::gamma</definition>
        <argsstring>(const Shape &amp;inShape, dtype inGammaShape, dtype inScaleValue=1)</argsstring>
        <name>gamma</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inGammaShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inScaleValue</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a &quot;gamma&quot; distrubution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.gamma.html#numpy.random.gamma">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.gamma.html#numpy.random.gamma</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inGammaShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inScaleValue</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="413" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="413" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a1887cf86a1baebbd04a5478d6ba6d0e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::geometric</definition>
        <argsstring>(const Shape &amp;inShape, double inP=0.5)</argsstring>
        <name>geometric</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inP</declname>
          <defval>0.5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a &quot;geometric&quot; distrubution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.geometric.html#numpy.random.geometric">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.geometric.html#numpy.random.geometric</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inP</parametername>
</parameternamelist>
<parameterdescription>
<para>(probablity of success [0, 1]) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="452" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="452" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a80c55a3bbcc68dc4a7721ca9a3e078ba" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::laplace</definition>
        <argsstring>(const Shape &amp;inShape, dtype inLoc=0, dtype inScale=1) noexcept</argsstring>
        <name>laplace</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inLoc</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>dtype</type>
          <declname>inScale</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a &quot;laplace&quot; distrubution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.laplace.html#numpy.random.laplace">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.laplace.html#numpy.random.laplace</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inLoc</parametername>
</parameternamelist>
<parameterdescription>
<para>(The position, mu, of the distribution peak. Default is 0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inScale</parametername>
</parameternamelist>
<parameterdescription>
<para>(float optional the exponential decay. Default is 1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="488" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="488" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1aee9698e1d4dc96db76926c2ffdccb6d0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::lognormal</definition>
        <argsstring>(const Shape &amp;inShape, dtype inMean=0, dtype inSigma=1)</argsstring>
        <name>lognormal</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inMean</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>dtype</type>
          <declname>inSigma</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a &quot;lognormal&quot; distrubution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.lognormal.html#numpy.random.lognormal">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.lognormal.html#numpy.random.lognormal</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value of the underlying normal distribution. Default is 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inSigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation of the underlying normal distribution. Should be greater than zero. Default is 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="514" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="514" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a72fc0e0e53cca6b78872c733b6a0ae3c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::negativeBinomial</definition>
        <argsstring>(const Shape &amp;inShape, dtype inN, double inP=0.5)</argsstring>
        <name>negativeBinomial</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inN</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inP</declname>
          <defval>0.5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from the �negative Binomial� distribution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.negative_binomial.html#numpy.random.negative_binomial">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.negative_binomial.html#numpy.random.negative_binomial</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inN</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trials </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inP</parametername>
</parameternamelist>
<parameterdescription>
<para>probablity of success [0, 1] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="547" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="547" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1ac9a8e8794eb51110c451327d7f7cc113" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::nonCentralChiSquared</definition>
        <argsstring>(const Shape &amp;inShape, dtype inK=1, dtype inLambda=1)</argsstring>
        <name>nonCentralChiSquared</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inK</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>dtype</type>
          <declname>inLambda</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a &quot;non central chi squared&quot; distrubution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.noncentral_chisquare.html#numpy.random.noncentral_chisquare">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.noncentral_chisquare.html#numpy.random.noncentral_chisquare</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inK</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inLambda</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="590" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="590" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a476e3a7c5c3c861bfdd8a18ddee7513c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::normal</definition>
        <argsstring>(const Shape &amp;inShape, dtype inMean=0, dtype inSigma=1)</argsstring>
        <name>normal</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inMean</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>dtype</type>
          <declname>inSigma</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a &quot;normal&quot; distrubution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.normal.html#numpy.random.normal">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.normal.html#numpy.random.normal</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value of the underlying normal distribution. Default is 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inSigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation of the underlying normal distribution. Should be greater than zero. Default is 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="630" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="630" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1aac7f15f7239f83f1b345ff5dfcca92f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::permutation</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>permutation</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Randomly permute a sequence, or return a permuted range. If x is an integer, randomly permute np.arange(x). If x is an array, make a copy and shuffle the elements randomly.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="661" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="661" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a880cb51bba7860edbf4f4fcc7b6ec5d2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::permutation</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>permutation</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Randomly permute a sequence, or return a permuted range. If x is an integer, randomly permute np.arange(x). If x is an array, make a copy and shuffle the elements randomly.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="679" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="679" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a2c9f9e6aa5ca88a6e1f674cf9f4391e3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::poisson</definition>
        <argsstring>(const Shape &amp;inShape, double inMean=1)</argsstring>
        <name>poisson</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inMean</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from the �poisson� distribution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.poisson.html#numpy.random.poisson">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.poisson.html#numpy.random.poisson</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMean</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="698" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="698" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1ac73c913bc278f74fd7d5085d03f837e0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::rand</definition>
        <argsstring>(const Shape &amp;inShape) noexcept</argsstring>
        <name>rand</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a uniform distribution over [0, 1).</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.rand.html#numpy.random.rand">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.rand.html#numpy.random.rand</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="730" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="730" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a05b9dec10bb644cf7eddb739080f0a4f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::randFloat</definition>
        <argsstring>(const Shape &amp;inShape, dtype inLow, dtype inHigh)</argsstring>
        <name>randFloat</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inLow</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inHigh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return random floats from low (inclusive) to high (exclusive), with the given shape</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.ranf.html#numpy.random.ranf">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.ranf.html#numpy.random.ranf</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inLow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inHigh</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="756" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="756" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a58118049d8d151830785eea302af5586" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::randInt</definition>
        <argsstring>(const Shape &amp;inShape, dtype inLow, dtype inHigh)</argsstring>
        <name>randInt</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inLow</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inHigh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return random integers from low (inclusive) to high (exclusive), with the given shape</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randint.html#numpy.random.randint">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randint.html#numpy.random.randint</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inLow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inHigh</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="793" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="793" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1aa1c4292668a94c9e5a9b554f9c0ca76d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::randN</definition>
        <argsstring>(const Shape &amp;inShape) noexcept</argsstring>
        <name>randN</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from the �standard normal� distribution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randn.html#numpy.random.randn">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randn.html#numpy.random.randn</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="832" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="832" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1ab6d07e63c6c81d701128f8200c5e70bb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nc::Random&lt; dtype &gt;::seed</definition>
        <argsstring>(uint32 inSeed) noexcept</argsstring>
        <name>seed</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inSeed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seeds the random number generator_</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.seed.html#numpy.random.seed">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.seed.html#numpy.random.seed</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSeed</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="854" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="854" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a3f774eb455f2e06bc9d931b0c6f7e02e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nc::Random&lt; dtype &gt;::shuffle</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>shuffle</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify a sequence in-place by shuffling its contents.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="866" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="866" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a5e65e0fed009fe294a460ac746c6ebdc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::standardNormal</definition>
        <argsstring>(const Shape &amp;inShape) noexcept</argsstring>
        <name>standardNormal</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from a &quot;standard normal&quot; distrubution with mean = 0 and std = 1</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.standard_normal.html#numpy.random.standard_normal">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.standard_normal.html#numpy.random.standard_normal</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="884" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="884" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a57a05a8245191055af23eb5cf2b636cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::studentT</definition>
        <argsstring>(const Shape &amp;inShape, dtype inDof)</argsstring>
        <name>studentT</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inDof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from the &quot;student-T&quot; distribution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.standard_t.html#numpy.random.standard_t">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.standard_t.html#numpy.random.standard_t</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inDof</parametername>
</parameternamelist>
<parameterdescription>
<para>independent random variables </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="901" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="901" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a3419c1f88a3c562441af695afd387daf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::triangle</definition>
        <argsstring>(const Shape &amp;inShape, dtype inA=0, dtype inB=0.5, dtype inC=1)</argsstring>
        <name>triangle</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inA</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>dtype</type>
          <declname>inB</declname>
          <defval>0.5</defval>
        </param>
        <param>
          <type>dtype</type>
          <declname>inC</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from the �triangle� distribution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.triangular.html#numpy.random.triangular">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.triangular.html#numpy.random.triangular</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inA</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inB</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inC</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="935" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="935" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1aaaa6a78b45066cdf9e8bd11f55ec37af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::uniform</definition>
        <argsstring>(const Shape &amp;inShape, dtype inLow, dtype inHigh)</argsstring>
        <name>uniform</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inLow</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inHigh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw samples from a uniform distribution.</para><para>Samples are uniformly distributed over the half - open interval[low, high) (includes low, but excludes high)</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.uniform.html#numpy.random.uniform">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.uniform.html#numpy.random.uniform</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inLow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inHigh</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="993" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="993" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1a87d6d188ab390ea5fed2da488bdb0cfa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::uniformOnSphere</definition>
        <argsstring>(uint32 inNumPoints, uint32 inDims=2)</argsstring>
        <name>uniformOnSphere</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumPoints</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inDims</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Such a distribution produces random numbers uniformly distributed on the unit sphere of arbitrary dimension dim.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumPoints</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inDims</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the sphere (default 2) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="1008" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="1008" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_random_1aed7b5774e94cfa1cca50f383ff3a3612" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>static NdArray&lt;dtype&gt; nc::Random&lt; dtype &gt;::weibull</definition>
        <argsstring>(const Shape &amp;inShape, dtype inA=1, dtype inB=1)</argsstring>
        <name>weibull</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inA</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>dtype</type>
          <declname>inB</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of the given shape and populate it with random samples from the &quot;weibull&quot; distribution.</para><para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.weibull.html#numpy.random.weibull">https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.weibull.html#numpy.random.weibull</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inA</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inB</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="1045" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="1045" bodyend="1070"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class for generating random numbers. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="27">
        <label>nc::Random&lt; dtype &gt;</label>
        <link refid="classnc_1_1_random"/>
      </node>
    </collaborationgraph>
    <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="54" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="53" bodyend="1071"/>
    <listofallmembers>
      <member refid="classnc_1_1_random_1a11b3ea85e8fb4c86365107b95b313b44" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>bernoulli</name></member>
      <member refid="classnc_1_1_random_1a236668f625cd32cbea5288c5eaf54f7c" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>beta</name></member>
      <member refid="classnc_1_1_random_1a71c188103a657ffca2cdc774f10b0401" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>binomial</name></member>
      <member refid="classnc_1_1_random_1a4581af3814e86dc1747c9551be235f6f" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>cauchy</name></member>
      <member refid="classnc_1_1_random_1abb4faf51dcca8ae9759b1262d64d7963" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>chiSquare</name></member>
      <member refid="classnc_1_1_random_1a21c9eb05244f5b2699aba20c355271d2" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>choice</name></member>
      <member refid="classnc_1_1_random_1a93cdbd1eb221effd117fa71853a4a85b" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>choice</name></member>
      <member refid="classnc_1_1_random_1ac012f79d1cf5bb09a8557e338c222719" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>discrete</name></member>
      <member refid="classnc_1_1_random_1aa035bb7e8e2987dc4a447b839ccc4cd8" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>exponential</name></member>
      <member refid="classnc_1_1_random_1a53a28374728aaa7087e231f0fae53b08" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>extremeValue</name></member>
      <member refid="classnc_1_1_random_1a6c5add0fbad5e12b09bcc906bc3e3042" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>f</name></member>
      <member refid="classnc_1_1_random_1a93a1804dff12c99cbfea67d63b6c1705" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>gamma</name></member>
      <member refid="classnc_1_1_random_1a1887cf86a1baebbd04a5478d6ba6d0e8" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>geometric</name></member>
      <member refid="classnc_1_1_random_1a80c55a3bbcc68dc4a7721ca9a3e078ba" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>laplace</name></member>
      <member refid="classnc_1_1_random_1aee9698e1d4dc96db76926c2ffdccb6d0" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>lognormal</name></member>
      <member refid="classnc_1_1_random_1a72fc0e0e53cca6b78872c733b6a0ae3c" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>negativeBinomial</name></member>
      <member refid="classnc_1_1_random_1ac9a8e8794eb51110c451327d7f7cc113" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>nonCentralChiSquared</name></member>
      <member refid="classnc_1_1_random_1a476e3a7c5c3c861bfdd8a18ddee7513c" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>normal</name></member>
      <member refid="classnc_1_1_random_1aac7f15f7239f83f1b345ff5dfcca92f7" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>permutation</name></member>
      <member refid="classnc_1_1_random_1a880cb51bba7860edbf4f4fcc7b6ec5d2" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>permutation</name></member>
      <member refid="classnc_1_1_random_1a2c9f9e6aa5ca88a6e1f674cf9f4391e3" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>poisson</name></member>
      <member refid="classnc_1_1_random_1ac73c913bc278f74fd7d5085d03f837e0" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>rand</name></member>
      <member refid="classnc_1_1_random_1a05b9dec10bb644cf7eddb739080f0a4f" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>randFloat</name></member>
      <member refid="classnc_1_1_random_1a58118049d8d151830785eea302af5586" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>randInt</name></member>
      <member refid="classnc_1_1_random_1aa1c4292668a94c9e5a9b554f9c0ca76d" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>randN</name></member>
      <member refid="classnc_1_1_random_1ab6d07e63c6c81d701128f8200c5e70bb" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>seed</name></member>
      <member refid="classnc_1_1_random_1a3f774eb455f2e06bc9d931b0c6f7e02e" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>shuffle</name></member>
      <member refid="classnc_1_1_random_1a5e65e0fed009fe294a460ac746c6ebdc" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>standardNormal</name></member>
      <member refid="classnc_1_1_random_1a57a05a8245191055af23eb5cf2b636cd" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>studentT</name></member>
      <member refid="classnc_1_1_random_1a3419c1f88a3c562441af695afd387daf" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>triangle</name></member>
      <member refid="classnc_1_1_random_1aaaa6a78b45066cdf9e8bd11f55ec37af" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>uniform</name></member>
      <member refid="classnc_1_1_random_1a87d6d188ab390ea5fed2da488bdb0cfa" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>uniformOnSphere</name></member>
      <member refid="classnc_1_1_random_1aed7b5774e94cfa1cca50f383ff3a3612" prot="public" virt="non-virtual"><scope>nc::Random</scope><name>weibull</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
