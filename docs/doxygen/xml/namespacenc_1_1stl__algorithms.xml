<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="namespacenc_1_1stl__algorithms" kind="namespace" language="C++">
    <compoundname>nc::stl_algorithms</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a74975591483e3e27b6de4c63bf5ff897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class UnaryPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::all_of</definition>
        <argsstring>(InputIt first, InputIt last, UnaryPredicate p)</argsstring>
        <name>all_of</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>UnaryPredicate</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if all of the elements of a range satisy a predicate</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>unary predicate function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="54" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="54" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a86175072e60e0fabc931a8acd6329c77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class UnaryPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::any_of</definition>
        <argsstring>(InputIt first, InputIt last, UnaryPredicate p)</argsstring>
        <name>any_of</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>UnaryPredicate</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if any of the elements of a range satisy a predicate</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>unary predicate function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="73" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="73" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1afc0a193758bfb62333c4ed53ada9537d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::copy</definition>
        <argsstring>(InputIt first, InputIt last, OutputIt destination)</argsstring>
        <name>copy</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies from one container to another</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="92" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1ae1e1834ec458e90544d643b4b1e68735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::iterator_traits&lt; InputIt &gt;::difference_type</type>
        <definition>std::iterator_traits&lt;InputIt&gt;::difference_type nc::stl_algorithms::count</definition>
        <argsstring>(InputIt first, InputIt last, const T &amp;value)</argsstring>
        <name>count</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Counts the values in the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="112" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="112" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a3de9f1dd54e8db8997e7928322e098f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::equal</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2)</argsstring>
        <name>equal</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if two ranges are equal</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of first container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of first container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of second container </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="131" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="131" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1ae3ace3ed68934f4acde48334a7ff7724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class BinaryPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::equal</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, BinaryPredicate p)</argsstring>
        <name>equal</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>BinaryPredicate</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if two ranges are equal</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of first container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of first container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of second container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>binary predicate to compare the elements </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="152" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="152" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1abbc2e8d742b76f4c2bead6ae894bc4e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::fill</definition>
        <argsstring>(ForwardIt first, ForwardIt last, const T &amp;value)</argsstring>
        <name>fill</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills the range with the value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="171" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="171" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1ab372e4e815977d16f647cdcfea3f1ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>InputIt</type>
        <definition>InputIt nc::stl_algorithms::find</definition>
        <argsstring>(InputIt first, InputIt last, const T &amp;value)</argsstring>
        <name>find</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the first element in the range [first, last) that satisfies specific criteria:</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>InputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="191" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="191" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a734698435eabdbc5bdf93b195d7fb6a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class UnaryFunction</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::for_each</definition>
        <argsstring>(InputIt first, InputIt last, UnaryFunction f)</argsstring>
        <name>for_each</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>UnaryFunction</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runs the function on each element of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="209" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="209" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a42bf8acb4c60400df32819dfd2507b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::is_sorted</definition>
        <argsstring>(ForwardIt first, ForwardIt last)</argsstring>
        <name>is_sorted</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the array is sorted</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool true if sorted </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="227" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="227" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a8f91b4c9610973486b45eab8a5f04d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
        </templateparamlist>
        <type>ForwardIt</type>
        <definition>ForwardIt nc::stl_algorithms::max_element</definition>
        <argsstring>(ForwardIt first, ForwardIt last)</argsstring>
        <name>max_element</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runs the maximum element of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ForwordIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="245" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="245" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1ab886383a0452b7240cf97d80b569e858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
        </templateparamlist>
        <type>ForwardIt</type>
        <definition>ForwardIt nc::stl_algorithms::min_element</definition>
        <argsstring>(ForwardIt first, ForwardIt last)</argsstring>
        <name>min_element</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runs the minimum element of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ForwardIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="262" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="262" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1ae2ab2d36f54efc167ea074348b0319fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; ForwardIt, ForwardIt &gt;</type>
        <definition>std::pair&lt;ForwardIt, ForwardIt&gt; nc::stl_algorithms::minmax_element</definition>
        <argsstring>(ForwardIt first, ForwardIt last)</argsstring>
        <name>minmax_element</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runs the minimum and maximum elements of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="281" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="281" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1aa8f79e15f5d691cc61bf56bd4299afed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class UnaryPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::none_of</definition>
        <argsstring>(InputIt first, InputIt last, UnaryPredicate p)</argsstring>
        <name>none_of</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>UnaryPredicate</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if none of the elements of a range satisy a predicate</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>unary predicate function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="300" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="300" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a946075f627d142f66626b03c30de8a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RandomIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::nth_element</definition>
        <argsstring>(RandomIt first, RandomIt nth, RandomIt last)</argsstring>
        <name>nth_element</name>
        <param>
          <type>RandomIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomIt</type>
          <declname>nth</declname>
        </param>
        <param>
          <type>RandomIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts up to the nth element</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nth</parametername>
</parameternamelist>
<parameterdescription>
<para>the element that should be sorted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="318" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="318" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a8674f754c02402908901506e8681839f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::replace</definition>
        <argsstring>(ForwardIt first, ForwardIt last, const T &amp;oldValue, const T &amp;newValue)</argsstring>
        <name>replace</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>oldValue</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>replaces a value in the range with another value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to replace </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the replacement value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="337" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="337" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a51eb1633787552e33ebede44bf5557a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BidirIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::reverse</definition>
        <argsstring>(BidirIt first, BidirIt last)</argsstring>
        <name>reverse</name>
        <param>
          <type>BidirIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>BidirIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reverses the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="355" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="355" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a79bd84376c57067a06ea0302f4fc261a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::rotate</definition>
        <argsstring>(ForwardIt first, ForwardIt firstN, ForwardIt last)</argsstring>
        <name>rotate</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>firstN</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rotates the elements of a range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstN</parametername>
</parameternamelist>
<parameterdescription>
<para>the element that should appear at the beginning of the rotated range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="373" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="373" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a8cc83e2fb7a3d8302db0f4b19513ddd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::set_difference</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt destination)</argsstring>
        <name>set_difference</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>last2</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>finds the difference of two ranges</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the second source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="394" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="394" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a6d7aea8b69f7e1a1129daad900a4917d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::set_intersection</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt destination)</argsstring>
        <name>set_intersection</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>last2</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>finds the intersection of two ranges</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the second source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="418" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="418" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1adda22e93ced5035c66f63532ee1408b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::set_union</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt destination)</argsstring>
        <name>set_union</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>last2</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>finds the union of two ranges</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the second source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="442" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="442" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a4987a29c6a989094d647f5a6de75cc6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RandomIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::sort</definition>
        <argsstring>(RandomIt first, RandomIt last)</argsstring>
        <name>sort</name>
        <param>
          <type>RandomIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="462" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="462" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a0a7faa16f597cc09d2540b2edf467fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RandomIt</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::stable_sort</definition>
        <argsstring>(RandomIt first, RandomIt last, Compare comp)</argsstring>
        <name>stable_sort</name>
        <param>
          <type>RandomIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts the range preserving order</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the comparitor function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="480" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="480" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a616d5dabd547326285946d0014361ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
          <param>
            <type>class UnaryOperation</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::transform</definition>
        <argsstring>(InputIt first, InputIt last, OutputIt destination, UnaryOperation unaryFunction)</argsstring>
        <name>transform</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>UnaryOperation</type>
          <declname>unaryFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transforms the elements of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unaryFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="500" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="500" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1af358fec5563ae500162b310fe263a36d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
          <param>
            <type>class BinaryOperation</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::transform</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, OutputIt destination, BinaryOperation unaryFunction)</argsstring>
        <name>transform</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>BinaryOperation</type>
          <declname>unaryFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transforms the elements of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the second source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unaryFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="522" column="1" bodyfile="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" bodystart="522" bodyend="531"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/GitHub/NumCpp/include/NumCpp/Core/StlAlgorithms.hpp" line="43" column="1"/>
  </compounddef>
</doxygen>
